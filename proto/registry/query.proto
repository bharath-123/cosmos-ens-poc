syntax = "proto3";
package cns.registry;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "registry/params.proto";
import "registry/recordmap.proto";
// this line is used by starport scaffolding # 1

option go_package = "cns/x/registry/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cns/registry/params";
  }
  // Queries a Recordmap by index.
	rpc Recordmap(QueryGetRecordmapRequest) returns (QueryGetRecordmapResponse) {
		option (google.api.http).get = "/cns/registry/recordmap/{index}";
	}

	// Queries a list of Recordmap items.
	rpc RecordmapAll(QueryAllRecordmapRequest) returns (QueryAllRecordmapResponse) {
		option (google.api.http).get = "/cns/registry/recordmap";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetRecordmapRequest {
	  string index = 1;

}

message QueryGetRecordmapResponse {
	Recordmap recordmap = 1 [(gogoproto.nullable) = false];
}

message QueryAllRecordmapRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRecordmapResponse {
	repeated Recordmap recordmap = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
